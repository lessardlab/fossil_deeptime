{
  "hash": "8715a46ffdbae1b9cc0e24b6045a47d9",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Feature preparation for climate variables\"\nauthor: 'Gabriel Munoz'\ndate: today\n---\n\n\n\n\n## Load libraries\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\nlibrary(raster)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: package 'raster' was built under R version 4.3.2\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nLoading required package: sp\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nThe legacy packages maptools, rgdal, and rgeos, underpinning the sp package,\nwhich was just loaded, will retire in October 2023.\nPlease refer to R-spatial evolution reports for details, especially\nhttps://r-spatial.org/r/2023/05/15/evolution4.html.\nIt may be desirable to make the sf package available;\npackage maintainers should consider adding sf to Suggests:.\nThe sp package is now running under evolution status 2\n     (status 2 uses the sf package in place of rgdal)\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\nlibrary(rasterVis)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: package 'rasterVis' was built under R version 4.3.3\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nLoading required package: lattice\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: package 'lattice' was built under R version 4.3.3\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\nlibrary(gridExtra)\nlibrary(viridis)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nLoading required package: viridisLite\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\nlibrary(grid)\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: package 'ggplot2' was built under R version 4.3.3\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: package 'readr' was built under R version 4.3.2\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.3     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::combine() masks gridExtra::combine()\n✖ tidyr::extract() masks raster::extract()\n✖ dplyr::filter()  masks stats::filter()\n✖ dplyr::lag()     masks stats::lag()\n✖ dplyr::select()  masks raster::select()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n\n\n:::\n:::\n\n\n\n\nMake a function to compute the temporal slope between the change of temperature between time bins\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\n#' Calculate the temporal slope or residual variance for each grid cell in a raster stack\n#'\n#' This function computes either the temporal slope or the variance of the residuals \n#' from a linear regression for each grid cell in a given raster stack. The slope \n#' describes the trend over time for each cell, while the residual variance gives \n#' an indication of the variability around the trend.\n#'\n#' @param raster_stack A raster stack or brick where each layer represents a time point.\n#' @param which A character string indicating whether to return the 'slope' (default) \n#' or the 'var' (residual variance) for each grid cell. The 'slope' indicates the rate \n#' of change over time, and 'var' reflects the variability of the model residuals.\n#'\n#' @return A raster object containing the computed slope or residual variance for each \n#' grid cell.\n#'\n#' @details The function extracts the raster values as a matrix, where each row corresponds \n#' to a spatial grid cell and each column to a time point. A linear regression is then \n#' fitted to the values for each cell, and either the slope or the variance of the \n#' residuals from this model is returned, depending on the argument provided.\n#'\n#' @note If all values for a grid cell are `NA`, the result for that cell will also be `NA`.\n#'\n#' @importFrom raster nlayers as.matrix values\n#' @importFrom stats lm coef residuals sd\n#'\n#' @examples\n#' # Example usage:\n#' library(raster)\n#' # Create a raster stack with random values (for demonstration)\n#' r1 <- raster(matrix(runif(100), 10, 10))\n#' r2 <- raster(matrix(runif(100), 10, 10))\n#' r3 <- raster(matrix(runif(100), 10, 10))\n#' raster_stack <- stack(r1, r2, r3)\n#' \n#' # Calculate the temporal slope for each grid cell\n#' slope_raster <- get_temporal_slope(raster_stack, which = 'slope')\n#'\n#' # Calculate the residual variance for each grid cell\n#' variance_raster <- get_temporal_slope(raster_stack, which = 'var')\n#'\n#' @export\n#' \nget_temporal_slope <- function(raster_stack, which = c('slope', 'var')){\n  \n\n  \n  # Get the number of layers and create a time variable\n  num_layers <- nlayers(raster_stack)\n  time_points <- rev(1:num_layers)\n\n  # Extract raster values as a matrix (each column represents a time point)\n  values_matrix <- as.matrix(raster_stack)\n  \n  # Function to calculate the slope of the regression line for each grid cell\n  calc_slope <- function(values, time_points, which = c('slope', 'var')) {\n    if (all(is.na(values))) {\n      return(NA)\n    } else {\n      lm_model <- lm(values ~ time_points)\n      \n      \n      if (which == 'var') {\n        return(sd(residuals(lm_model)))  # Variance of the model residuals\n      } else {\n        return(coef(lm_model)[2])  # Slope of the regression line\n      }\n    }\n  }\n  \n  # Apply the function to each grid cell\n  slope_values <- apply(values_matrix, 1, calc_slope, time_points, which)\n  \n  # Create a raster for the slope values\n  slope_raster <- raster_stack[[1]]\n  values(slope_raster) <- slope_values\n  \n  return(slope_raster)\n  \n}\n```\n:::\n\n\n\n\n## Making climate features from temperature spatiotemporal data \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\nTemp_binned  <- readRDS( 'DATA/temperature_grid/Temp_binned.rds')\n\n## set the adequate projection\n\n# Lambert Azimuthal Equal-Area for Europe\n# Define the Lambert Azimuthal Equal-Area projection centered between NA and Europe\ncrs_equal_area <- CRS(\"+proj=laea +lat_0=45 +lon_0=-30 +datum=WGS84 +units=m\")\n\nTemp_binned <-\n  Temp_binned |>\n  map(function(x) {\n\n    crs(x) <- CRS(\"+proj=longlat +datum=WGS84 +no_defs\")\n\n    raster::projectRaster(x, crs = crs_equal_area)\n\n  })\n```\n:::\n\n\n\n\n\n## Mean temperature \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\nmean_temp <- sapply(Temp_binned, function(stack) {\n  mean(stack, na.rm = TRUE)\n})\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\nsaveRDS(mean_temp, 'DATA/temperature_grid/mean_temp.rds')\n\nmean_temp <- readRDS('DATA/temperature_grid/mean_temp.rds')\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\nmean_temp_stack <- stack(mean_temp)\nplot(mean_temp_stack)\n```\n\n::: {.cell-output-display}\n![](02_prepare_climate_var_features_files/figure-jats/unnamed-chunk-6-1.png)\n:::\n\n```{.r .cell-code .hidden}\nsaveRDS(mean_temp_stack, 'DATA/out/mean_temp_stack.rds')\n```\n:::\n\n\n\n\n## Temperature gradient\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\ntemp_gradients <- lapply(mean_temp, function(stack) {\n  terrain(stack, opt = \"slope\", \n          unit = \"degrees\", neighbors = 8)\n})\n\ntemp_gradients <- stack(temp_gradients)\n\nplot(temp_gradients)\n```\n\n::: {.cell-output-display}\n![](02_prepare_climate_var_features_files/figure-jats/unnamed-chunk-7-1.png)\n:::\n\n```{.r .cell-code .hidden}\nsaveRDS(temp_gradients, 'DATA/out/temp_gradients.rds')\n```\n:::\n\n\n\n\n\n## Temporal slope\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\ntemporal_slope <- Temp_binned |> map(function(x) {\n  get_temporal_slope(x, which = 'slope')})\n\ntemporal_slope <- stack(temporal_slope)\n\nplot(temporal_slope)\n```\n\n::: {.cell-output-display}\n![](02_prepare_climate_var_features_files/figure-jats/unnamed-chunk-8-1.png)\n:::\n\n```{.r .cell-code .hidden}\nsaveRDS(temporal_slope, 'DATA/out/temporal_slope.rds')\n```\n:::\n\n\n\n\n## Temporal variance \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\ntemporal_variance <- Temp_binned |> map(function(x) \n  get_temporal_slope(x, which = 'var'))\n\ntemporal_variance <- stack(temporal_variance)\n\nplot(temporal_variance)\n```\n\n::: {.cell-output-display}\n![](02_prepare_climate_var_features_files/figure-jats/unnamed-chunk-9-1.png)\n:::\n\n```{.r .cell-code .hidden}\nsaveRDS(temporal_variance, 'DATA/out/temporal_variance.rds')\n```\n:::\n",
    "supporting": [
      "02_prepare_climate_var_features_files\\figure-jats"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": null,
    "postProcess": false
  }
}
{
  "hash": "5b575054ca4ec836a0dca9a2342371b6",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"General dissimilarity models\" \nauthor: \"Gabriel Munoz\" \ndate: today \nexcute: \n  warning: false\n  message: false\n--- \n\n::: {.cell}\n\n```{.r .cell-code .hidden}\nlibrary(gdm)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: package 'gdm' was built under R version 4.3.2\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nThe legacy packages maptools, rgdal, and rgeos, underpinning the sp package,\nwhich was just loaded, will retire in October 2023.\nPlease refer to R-spatial evolution reports for details, especially\nhttps://r-spatial.org/r/2023/05/15/evolution4.html.\nIt may be desirable to make the sf package available;\npackage maintainers should consider adding sf to Suggests:.\nThe sp package is now running under evolution status 2\n     (status 2 uses the sf package in place of rgdal)\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\nsource('00_functions.R')\n```\n:::\n\n\n\n\n\n## Load data for this notebook \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\ntemporal_slope <- readRDS(\"DATA/out/temporal_slope.rds\")\ntemporal_variance <- readRDS('DATA/out/temporal_variance.rds')\nspatial_variance <- readRDS('DATA/out/temp_gradients.rds')\nmean_temp <- readRDS('DATA/out/mean_temp_stack.rds')\n\n\n\nsubset_fossil <- readRDS('DATA/out/fossil_data_cleaned.rds')\ntime_order <- c('Aquitanian', 'Burdigalian', 'Langhian', 'Serravallian', 'Tortonian', 'Messinian', 'Zanclean', \n                \"Piacenzian\")\n```\n:::\n\n\n\n\n## Prepare the site-pair table \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\nlibrary(sp)\nlibrary(sf)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: package 'sf' was built under R version 4.3.2\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nLinking to GEOS 3.11.2, GDAL 3.7.2, PROJ 9.3.0; sf_use_s2() is TRUE\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\nlibrary(terra)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: package 'terra' was built under R version 4.3.2\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nterra 1.7.55\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\nlibrary(raster)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: package 'raster' was built under R version 4.3.2\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: package 'ggplot2' was built under R version 4.3.3\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: package 'readr' was built under R version 4.3.2\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.3     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ tidyr::extract() masks raster::extract(), terra::extract()\n✖ dplyr::filter()  masks stats::filter()\n✖ dplyr::lag()     masks stats::lag()\n✖ dplyr::select()  masks raster::select()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\nget_env_var <- function(rot_lng, rot_lat, midpoint_period){\n  \n\n  point_p <- sp::SpatialPoints(matrix(c(rot_lat,rot_lng), nrow = 1),  proj4string =CRS(\"+proj=longlat +datum=WGS84\"))\n  \n  # Define the target projection\n  # target_crs <- CRS(\"+proj=laea +lat_0=45 +lon_0=-30 +datum=WGS84 +units=m\")\n  \n  # Reproject the point\n  # reprojected_point <- spTransform(point_p, target_crs)\n  \n  \n  # extract values (# points auto project to match raster projection)\n  t_slope <- raster::extract(temporal_slope[[midpoint_period]], reprojected_point)\n  t_var <- raster::extract(temporal_variance[[midpoint_period]], reprojected_point)\n  t_svar <- raster::extract(spatial_variance[[midpoint_period]], reprojected_point)\n  t_mean <- raster::extract(mean_temp[[midpoint_period]], reprojected_point)\n\n  return(data.frame(t_slope, t_var,t_svar, t_mean))\n  \n}\n```\n:::\n\n\n\n\n\nExtract climatic information from raster layers \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\nfossil_with_env_var <- \nsubset_fossil |>\n  group_by(midpoint_period)|>\n  select(rot_lng, rot_lat, midpoint_period)\n\nfossil_with_env_var <- \nfossil_with_env_var |> \n  group_split() %>%\n  setNames(group_keys(fossil_with_env_var)$midpoint_period) |>\n  imap(~{\n\n  # extract values (# points auto project to match raster projection)\n  t_slope <- raster::extract(temporal_slope[[.y]], .x$geometry |> st_as_sf()) \n  t_var <- raster::extract(temporal_variance[[.y]], .x$geometry |> st_as_sf())\n  t_svar <- raster::extract(spatial_variance[[.y]], .x$geometry |> st_as_sf())\n  t_mean <- raster::extract(mean_temp[[.y]], .x$geometry |> st_as_sf())\n\n  return(data.frame(t_slope, t_var,t_svar, t_mean))\n  \n  }) |>\n  bind_rows() |> \n  bind_cols(subset_fossil)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning in .local(x, y, ...): Transforming SpatialPoints to the crs of the\nRaster\n\nWarning in .local(x, y, ...): Transforming SpatialPoints to the crs of the\nRaster\n\nWarning in .local(x, y, ...): Transforming SpatialPoints to the crs of the\nRaster\n\nWarning in .local(x, y, ...): Transforming SpatialPoints to the crs of the\nRaster\n\nWarning in .local(x, y, ...): Transforming SpatialPoints to the crs of the\nRaster\n\nWarning in .local(x, y, ...): Transforming SpatialPoints to the crs of the\nRaster\n\nWarning in .local(x, y, ...): Transforming SpatialPoints to the crs of the\nRaster\n\nWarning in .local(x, y, ...): Transforming SpatialPoints to the crs of the\nRaster\n\nWarning in .local(x, y, ...): Transforming SpatialPoints to the crs of the\nRaster\n\nWarning in .local(x, y, ...): Transforming SpatialPoints to the crs of the\nRaster\n\nWarning in .local(x, y, ...): Transforming SpatialPoints to the crs of the\nRaster\n\nWarning in .local(x, y, ...): Transforming SpatialPoints to the crs of the\nRaster\n\nWarning in .local(x, y, ...): Transforming SpatialPoints to the crs of the\nRaster\n\nWarning in .local(x, y, ...): Transforming SpatialPoints to the crs of the\nRaster\n\nWarning in .local(x, y, ...): Transforming SpatialPoints to the crs of the\nRaster\n\nWarning in .local(x, y, ...): Transforming SpatialPoints to the crs of the\nRaster\n\nWarning in .local(x, y, ...): Transforming SpatialPoints to the crs of the\nRaster\n\nWarning in .local(x, y, ...): Transforming SpatialPoints to the crs of the\nRaster\n\nWarning in .local(x, y, ...): Transforming SpatialPoints to the crs of the\nRaster\n\nWarning in .local(x, y, ...): Transforming SpatialPoints to the crs of the\nRaster\n\nWarning in .local(x, y, ...): Transforming SpatialPoints to the crs of the\nRaster\n\nWarning in .local(x, y, ...): Transforming SpatialPoints to the crs of the\nRaster\n\nWarning in .local(x, y, ...): Transforming SpatialPoints to the crs of the\nRaster\n\nWarning in .local(x, y, ...): Transforming SpatialPoints to the crs of the\nRaster\n\nWarning in .local(x, y, ...): Transforming SpatialPoints to the crs of the\nRaster\n\nWarning in .local(x, y, ...): Transforming SpatialPoints to the crs of the\nRaster\n\nWarning in .local(x, y, ...): Transforming SpatialPoints to the crs of the\nRaster\n\nWarning in .local(x, y, ...): Transforming SpatialPoints to the crs of the\nRaster\n\nWarning in .local(x, y, ...): Transforming SpatialPoints to the crs of the\nRaster\n\nWarning in .local(x, y, ...): Transforming SpatialPoints to the crs of the\nRaster\n\nWarning in .local(x, y, ...): Transforming SpatialPoints to the crs of the\nRaster\n\nWarning in .local(x, y, ...): Transforming SpatialPoints to the crs of the\nRaster\n```\n\n\n:::\n:::\n\n\n\n\n\nCreate the site-pair table \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\nfossil_with_env_var2 <- \nfossil_with_env_var |>\n  group_by(grid_id_5, midpoint_period) |>\n  mutate(lat = mean(rot_lat), \n         lon =  mean(rot_lng))  |> \n  mutate(t_slope = mean(t_slope, na.rm = T), \n            t_var = mean(t_var, na.rm = T), \n            t_mean = mean(t_mean, na.rm = T), \n            t_svar = mean(t_svar, na.rm = T)) |>\n  ungroup() |>\n  group_by(grid_id_5, midpoint_period, GENUS) |> \n  mutate(ab = n_distinct(LIDNUM)) |>\n  ungroup()\n# biological data \n\nsppTab <- \nfossil_with_env_var2 |> \n  select(GENUS, grid_id_5, lat, lon, midpoint_period,ab) \n  \n\n# environmental data \nenv_data  <- \nfossil_with_env_var2 |> \n  select(starts_with('t_'),lat, lon,grid_id_5, midpoint_period)  \n\n\nsppTab <- \nsppTab |> \n  group_by(midpoint_period) |>\n  group_split()\n\nenvTab <- \nenv_data |> \n  group_by(midpoint_period) |>\n  group_split()\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\ngdm_models <- \n1:length(sppTab) |>\n  map(~{ \n    gdmTab <- formatsitepair(bioData=sppTab[[.x]], \n                         bioFormat=2, #x-y spp list\n                         XColumn=\"lon\", \n                         YColumn=\"lat\",\n                         sppColumn=\"GENUS\", \n                         siteColumn=\"grid_id_5\",\n                         sppFilter = 3,\n                         abundColumn =  \"ab\", \n                         predData=envTab[[.x]])\n\ngdmTab <- gdmTab[complete.cases(gdmTab),]\ngdmTab <- gdmTab |>\n  select(-matches('midpoint'))\n\ngdm.1 <- gdm(data=gdmTab, geo=TRUE)\n  \nreturn(gdm.1)  \n    })\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nAggregation function missing: defaulting to length\nAggregation function missing: defaulting to length\nAggregation function missing: defaulting to length\nAggregation function missing: defaulting to length\nAggregation function missing: defaulting to length\nAggregation function missing: defaulting to length\nAggregation function missing: defaulting to length\nAggregation function missing: defaulting to length\n```\n\n\n:::\n:::\n\n\n\n\nExtract coefficients and variable contribution \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\ngdm_coeff <- \n1:8 |> \n  map(~{\n    data.frame(t(colSums(matrix(gdm_models[[.x]]$coefficients, c(3,gdm_models[[.x]]$predictors |> length())))))\n  })\n\nvariable_contribution <-\ngdm_coeff |> \n  bind_rows() |>\n  setNames(gdm_models[[1]]$predictors)\n  \n\n\nfive_colors <- c(\n  \"#E69F00\",  # Geographic\n  \"#56B4E9\",  # t_slope\n  \"#009E73\",  # t_var\n  \"#F0E442\",  # t_svar\n  \"#0072B2\"   # t_mean\n)\n\n\nbarplot(as.matrix(t(variable_contribution)),\n        col= five_colors)\n```\n\n::: {.cell-output-display}\n![](04_GDMs_files/figure-jats/unnamed-chunk-7-1.png)\n:::\n\n```{.r .cell-code .hidden}\nbarplot(as.matrix(t(variable_contribution/rowSums(variable_contribution))), col =five_colors)\n```\n\n::: {.cell-output-display}\n![](04_GDMs_files/figure-jats/unnamed-chunk-7-2.png)\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\nrast_trans_all <- \n  1:length(sppTab) |>\n  map(~{ \n    raster_all <- stack(temporal_slope[[.x]], temporal_variance[[.x]], spatial_variance[[.x]], mean_temp[[.x]])\n    names(raster_all) <- c(\"Magnitude\", 'Temporal variance', 'Spatial variance', 'Mean Temperature')\n    \n    \n    transRasts <- gdm.transform(model=gdm_models[[.x]], data=raster_all)\n    \n    \n    transRasts <- subset(transRasts, c('Magnitude', 'Temporal.variance', 'Spatial.variance', 'Mean.Temperature'))\n  })\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning in gdm.transform(model = gdm_models[[.x]], data = raster_all):\nExtracted data from rasters contained NAs. These were automatically removed\nfrom the data object to be transformed.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning in .local(x, ...): invalid layer names omitted\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning in gdm.transform(model = gdm_models[[.x]], data = raster_all):\nExtracted data from rasters contained NAs. These were automatically removed\nfrom the data object to be transformed.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning in .local(x, ...): invalid layer names omitted\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning in gdm.transform(model = gdm_models[[.x]], data = raster_all):\nExtracted data from rasters contained NAs. These were automatically removed\nfrom the data object to be transformed.\n\nWarning in gdm.transform(model = gdm_models[[.x]], data = raster_all):\nExtracted data from rasters contained NAs. These were automatically removed\nfrom the data object to be transformed.\n\nWarning in gdm.transform(model = gdm_models[[.x]], data = raster_all):\nExtracted data from rasters contained NAs. These were automatically removed\nfrom the data object to be transformed.\n\nWarning in gdm.transform(model = gdm_models[[.x]], data = raster_all):\nExtracted data from rasters contained NAs. These were automatically removed\nfrom the data object to be transformed.\n\nWarning in gdm.transform(model = gdm_models[[.x]], data = raster_all):\nExtracted data from rasters contained NAs. These were automatically removed\nfrom the data object to be transformed.\n\nWarning in gdm.transform(model = gdm_models[[.x]], data = raster_all):\nExtracted data from rasters contained NAs. These were automatically removed\nfrom the data object to be transformed.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning in .local(x, ...): invalid layer names omitted\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\n# Function to convert a single raster layer to a data frame\nraster_to_df <- function(rast_layer) {\n  df <- as.data.frame(rast_layer, xy = TRUE, na.rm = TRUE)\n  colnames(df) <- c(\"x\", \"y\", \"value\")\n  return(df)\n}\n\n# Function to create a ggplot map for a given data frame and layer name\ncreate_map <- function(df, layer_name) {\n  ggplot() +\n    geom_raster(data = df, aes(x = x, y = y, fill = value)) +\n    coord_fixed() +\n    scale_fill_viridis_c(name = layer_name, option = \"C\") +\n    theme_minimal() +\n    labs(title = layer_name, x = \"Longitude\", y = \"Latitude\") +\n    theme(\n      plot.title = element_text(size = 14, face = \"bold\", hjust = 0.5),\n      axis.title = element_text(size = 12)\n    ) \n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\nstage_plots <-\n\n1:8 |>\n  map(~{\n    # Convert all raster layers to data frames and store in a list\ndf_list <- lapply(1:nlayers(rast_trans_all[[.x]]), function(i) {\n  raster_to_df(rast_trans_all[[i]])\n})\n\n# Assign names to the list elements for labeling\nnames(df_list) <- names(rast_trans_all[[.x]]) \n\n\n\n\n# Create a list of ggplot maps\nplot_list <- mapply(create_map, df_list, names(df_list), SIMPLIFY = FALSE)\n\n    return(plot_list)\n  })\n\n\n\nstage_plots[[1]]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$Temporal.variance\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: Raster pixels are placed at uneven horizontal intervals and will be shifted\nℹ Consider using `geom_tile()` instead.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](04_GDMs_files/figure-jats/unnamed-chunk-10-1.png)\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n$Spatial.variance\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: Raster pixels are placed at uneven horizontal intervals and will be shifted\nℹ Consider using `geom_tile()` instead.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](04_GDMs_files/figure-jats/unnamed-chunk-10-2.png)\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n$Mean.Temperature\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: Raster pixels are placed at uneven horizontal intervals and will be shifted\nℹ Consider using `geom_tile()` instead.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](04_GDMs_files/figure-jats/unnamed-chunk-10-3.png)\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\nextract_trend <- function(raster, var) {\n  # Get layer names\n  layer_names <- names(raster)\n  \n  if (var %in% layer_names) {\n    # If 'Magnitude' exists, return it\n    return(subset(raster, var))\n  } else {\n \n    return(NULL)\n    \n\n  }\n}\n\n\n\npred_mean_temperature_stack <- map(rast_trans_all, extract_trend, 'Mean.Temperature')\n\npred_t_svar_stack <- map(rast_trans_all, extract_trend, 'Spatial.variance')\npred_t_slope_stack <- map(rast_trans_all, extract_trend, 'Magnitude')\npred_t_var_stack <- map(rast_trans_all, extract_trend, 'Temporal.variance')\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\nMT_agg <- calc(pred_mean_temperature_stack |> stack(), sum, na.rm = TRUE)\n\nTS_agg <- calc( keep(pred_t_slope_stack,~!is.null(.x)) |> stack(), sum, na.rm = TRUE)\n\nT_Svar_agg <- calc(keep(pred_t_svar_stack,~!is.null(.x))  |> stack(), sum, na.rm = TRUE)\n\n\nT_var_agg <- calc(keep(pred_t_var_stack,~!is.null(.x))  |> stack(), sum, na.rm = TRUE)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\nMT_agg |> plot(main = 'Mean')\n```\n\n::: {.cell-output-display}\n![](04_GDMs_files/figure-jats/unnamed-chunk-13-1.png)\n:::\n\n```{.r .cell-code .hidden}\nTS_agg |> plot(main= 'Magnitude')\n```\n\n::: {.cell-output-display}\n![](04_GDMs_files/figure-jats/unnamed-chunk-13-2.png)\n:::\n\n```{.r .cell-code .hidden}\nT_Svar_agg |> plot(main = 'Spatial instability')\n```\n\n::: {.cell-output-display}\n![](04_GDMs_files/figure-jats/unnamed-chunk-13-3.png)\n:::\n\n```{.r .cell-code .hidden}\nT_var_agg |> plot(main = 'Temporal instability')\n```\n\n::: {.cell-output-display}\n![](04_GDMs_files/figure-jats/unnamed-chunk-13-4.png)\n:::\n:::\n",
    "supporting": [
      "04_GDMs_files\\figure-jats"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": null,
    "postProcess": false
  }
}